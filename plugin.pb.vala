// Generated by protoc-gen-vala from plugin.proto, do not edit

public class CodeGeneratorRequest
{
    public List<string> file_to_generate;
    public string? parameter;
    public List<FileDescriptorProto> proto_file;

    public CodeGeneratorRequest.from_data (uint8[] buffer, size_t length, size_t offset = 0)
    {
        decode (buffer, length, offset);
    }

    public void decode (uint8[] buffer, size_t length, size_t offset = 0)
    {
        while (offset < length)
        {
            var key = Protobuf.decode_varint (buffer, length, ref offset);
            var wire_type = key & 0x7;
            var field_number = key >> 3;
            int varint;
            var value_length = Protobuf.get_value_length (wire_type, out varint, buffer, length, ref offset);
            // FIXME: Check remaining space

            switch (field_number)
            {
            case 1:
                file_to_generate.append (Protobuf.decode_string (buffer, offset + value_length, offset));
                break;
            case 2:
                parameter = Protobuf.decode_string (buffer, offset + value_length, offset);
                break;
            case 15:
                proto_file.append (new FileDescriptorProto.from_data (buffer, offset + value_length, offset));
                break;
            }

            offset += value_length;
        }

        if (offset != length)
            stderr.printf ("Unused %zu octets on end of CodeGeneratorRequest\n", offset - length);
    }

    public size_t encode (uint8[] buffer, ref size_t offset)
    {
        var start = offset;

        for (unowned List<FileDescriptorProto> i = proto_file.last (); i != null; i = i.prev)
        {
            var n = i.data.encode (buffer, ref offset);
            Protobuf.encode_varint (n, buffer, ref offset);
            Protobuf.encode_varint (122, buffer, ref offset);
        }
        if (parameter != null)
        {
            var n = Protobuf.encode_string (parameter, buffer, ref offset);
            Protobuf.encode_varint (n, buffer, ref offset);
            Protobuf.encode_varint (18, buffer, ref offset);
        }
        for (unowned List<string> i = file_to_generate.last (); i != null; i = i.prev)
        {
            var n = Protobuf.encode_string (i.data, buffer, ref offset);
            Protobuf.encode_varint (n, buffer, ref offset);
            Protobuf.encode_varint (10, buffer, ref offset);
        }

        return start - offset;
    }

    public string to_string ()
    {
        var text = "";

        if (file_to_generate != null)
        {
            text += "file_to_generate=[";
            foreach (var f in file_to_generate)
                text += "\"%s\" ".printf (f);
            text += "] ";
        }

        if (parameter != null)
            text += "parameter=\"%s\" ".printf (parameter);

        if (proto_file != null)
        {
            text += "proto_file=[";
            foreach (var f in proto_file)
                text += "{ %s } ".printf (f.to_string ());
            text += "] ";
        }

        return text;
    }
}

public class CodeGeneratorResponse
{
    public class File
    {
        public string? name;
        public string? insertion_point;
        public string? content;

        public File.from_data (uint8[] buffer, size_t length, size_t offset = 0)
        {
            decode (buffer, length, offset);
        }

        public void decode (uint8[] buffer, size_t length, size_t offset = 0)
        {
            while (offset < length)
            {
                var key = Protobuf.decode_varint (buffer, length, ref offset);
                var wire_type = key & 0x7;
                var field_number = key >> 3;
                int varint;
                var value_length = Protobuf.get_value_length (wire_type, out varint, buffer, length, ref offset);
                // FIXME: Check remaining space

                switch (field_number)
                {
                case 1:
                    name = Protobuf.decode_string (buffer, offset + value_length, offset);
                    break;
                case 2:
                    insertion_point = Protobuf.decode_string (buffer, offset + value_length, offset);
                    break;
                case 15:
                    content = Protobuf.decode_string (buffer, offset + value_length, offset);
                    break;
                }

                offset += value_length;
            }
        }

        public size_t encode (uint8[] buffer, ref size_t offset)
        {
            var start = offset;

            if (content != null)
            {
                var n = Protobuf.encode_string (content, buffer, ref offset);
                Protobuf.encode_varint (n, buffer, ref offset);
                Protobuf.encode_varint (122, buffer, ref offset);
            }
            if (insertion_point != null)
            {
                var n = Protobuf.encode_string (insertion_point, buffer, ref offset);
                Protobuf.encode_varint (n, buffer, ref offset);
                Protobuf.encode_varint (18, buffer, ref offset);
            }
            if (name != null)
            {
                var n = Protobuf.encode_string (name, buffer, ref offset);
                Protobuf.encode_varint (n, buffer, ref offset);
                Protobuf.encode_varint (10, buffer, ref offset);
            }

            return start - offset;
        }
    }

    public string? error;
    public List<File> file;

    public CodeGeneratorResponse.from_data (uint8[] buffer, size_t length, size_t offset = 0)
    {
        decode (buffer, length, offset);
    }

    public void decode (uint8[] buffer, size_t length, size_t offset = 0)
    {
        while (offset < length)
        {
            var key = Protobuf.decode_varint (buffer, length, ref offset);
            var wire_type = key & 0x7;
            var field_number = key >> 3;
            int varint;
            var value_length = Protobuf.get_value_length (wire_type, out varint, buffer, length, ref offset);
            // FIXME: Check remaining space

            switch (field_number)
            {
            case 1:
                error = Protobuf.decode_string (buffer, offset + value_length, offset);
                break;
            case 15:
                file.append (new File.from_data (buffer, offset + value_length, offset));
                break;
            }

            offset += value_length;
        }
    }

    public size_t encode (uint8[] buffer, ref size_t offset)
    {
        var start = offset;

        for (unowned List<File> i = file.last (); i != null; i = i.prev)
        {
            var n = i.data.encode (buffer, ref offset);
            Protobuf.encode_varint (n, buffer, ref offset);
            Protobuf.encode_varint (122, buffer, ref offset);
        }
        if (error != null)
        {
            var n = Protobuf.encode_string (error, buffer, ref offset);
            Protobuf.encode_varint (n, buffer, ref offset);
            Protobuf.encode_varint (10, buffer, ref offset);
        }

        return start - offset;
    }
}
