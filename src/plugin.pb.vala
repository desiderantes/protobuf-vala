// Generated by protoc-gen-vala 0.1.0 from plugin.proto, do not edit

public class CodeGeneratorRequest : Protobuf.Message
{
    public List<string> file_to_generate;
    public string parameter;
    public List<FileDescriptorProto> proto_file;

    public CodeGeneratorRequest ()
    {
        this.file_to_generate = new List<string> ();
        this.parameter = "";
        this.proto_file = new List<FileDescriptorProto> ();
    }

    public CodeGeneratorRequest.from_data (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        decode (buffer, data_length);
    }

    public override bool decode (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        size_t end;
        if (data_length < 0)
            end = buffer.buffer.length;
        else
            end = buffer.read_index + data_length;

        this.file_to_generate = new List<string> ();
        this.parameter = "";
        this.proto_file = new List<FileDescriptorProto> ();
        while (buffer.read_index < end)
        {
            var key = buffer.decode_varint ();
            var wire_type = key & 0x7;
            var field_number = key >> 3;

            if (field_number == 1 && wire_type == 2)
                this.file_to_generate.append (buffer.decode_string ((size_t) buffer.decode_varint ()));
            else if (field_number == 2 && wire_type == 2)
                this.parameter = buffer.decode_string ((size_t) buffer.decode_varint ());
            else if (field_number == 15 && wire_type == 2)
                this.proto_file.append (new FileDescriptorProto.from_data (buffer, (ssize_t) buffer.decode_varint ()));
            else
                this.unknown_fields.prepend (buffer.decode_unknown_field (key));
        }

        if (buffer.read_index != end)
            buffer.error = true;

        return !buffer.error;
    }

    public override size_t encode (Protobuf.EncodeBuffer buffer)
    {
        size_t n_written = 0;

        foreach (var f in this.unknown_fields)
            n_written += buffer.encode_unknown_field (f);
        for (unowned List<FileDescriptorProto> i = this.proto_file.last (); i != null; i = i.prev)
        {
            var proto_file_length = i.data.encode (buffer);
            n_written += proto_file_length;
            n_written += buffer.encode_varint (proto_file_length);
            n_written += buffer.encode_varint (122);
        }
        if (this.parameter != "")
        {
            var parameter_length = buffer.encode_string (this.parameter);
            n_written += parameter_length;
            n_written += buffer.encode_varint (parameter_length);
            n_written += buffer.encode_varint (18);
        }
        for (unowned List<string> i = this.file_to_generate.last (); i != null; i = i.prev)
        {
            var file_to_generate_length = buffer.encode_string (i.data);
            n_written += file_to_generate_length;
            n_written += buffer.encode_varint (file_to_generate_length);
            n_written += buffer.encode_varint (10);
        }

        return n_written;
    }

    public override string to_string (string indent = "")
    {
        var text = "";

        foreach (unowned string v in this.file_to_generate)
        {
            text += indent + "file_to_generate: %s\n".printf (Protobuf.string_to_string (v));
        }
        text += indent + "parameter: %s\n".printf (Protobuf.string_to_string (this.parameter));
        foreach (unowned FileDescriptorProto v in this.proto_file)
        {
            text += indent + "proto_file {\n";
            text += "%s".printf (v.to_string (indent + "  "));
            text += indent + "}\n";
        }

        return text;
    }
}

public class CodeGeneratorResponse : Protobuf.Message
{
    public class File : Protobuf.Message
    {
        public string name;
        public string insertion_point;
        public string content;

        public File ()
        {
            this.name = "";
            this.insertion_point = "";
            this.content = "";
        }

        public File.from_data (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
        {
            decode (buffer, data_length);
        }

        public override bool decode (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
        {
            size_t end;
            if (data_length < 0)
                end = buffer.buffer.length;
            else
                end = buffer.read_index + data_length;

            this.name = "";
            this.insertion_point = "";
            this.content = "";
            while (buffer.read_index < end)
            {
                var key = buffer.decode_varint ();
                var wire_type = key & 0x7;
                var field_number = key >> 3;

                if (field_number == 1 && wire_type == 2)
                    this.name = buffer.decode_string ((size_t) buffer.decode_varint ());
                else if (field_number == 2 && wire_type == 2)
                    this.insertion_point = buffer.decode_string ((size_t) buffer.decode_varint ());
                else if (field_number == 15 && wire_type == 2)
                    this.content = buffer.decode_string ((size_t) buffer.decode_varint ());
                else
                    this.unknown_fields.prepend (buffer.decode_unknown_field (key));
            }

            if (buffer.read_index != end)
                buffer.error = true;

            return !buffer.error;
        }

        public override size_t encode (Protobuf.EncodeBuffer buffer)
        {
            size_t n_written = 0;

            foreach (var f in this.unknown_fields)
                n_written += buffer.encode_unknown_field (f);
            if (this.content != "")
            {
                var content_length = buffer.encode_string (this.content);
                n_written += content_length;
                n_written += buffer.encode_varint (content_length);
                n_written += buffer.encode_varint (122);
            }
            if (this.insertion_point != "")
            {
                var insertion_point_length = buffer.encode_string (this.insertion_point);
                n_written += insertion_point_length;
                n_written += buffer.encode_varint (insertion_point_length);
                n_written += buffer.encode_varint (18);
            }
            if (this.name != "")
            {
                var name_length = buffer.encode_string (this.name);
                n_written += name_length;
                n_written += buffer.encode_varint (name_length);
                n_written += buffer.encode_varint (10);
            }

            return n_written;
        }

        public override string to_string (string indent = "")
        {
            var text = "";

            text += indent + "name: %s\n".printf (Protobuf.string_to_string (this.name));
            text += indent + "insertion_point: %s\n".printf (Protobuf.string_to_string (this.insertion_point));
            text += indent + "content: %s\n".printf (Protobuf.string_to_string (this.content));

            return text;
        }
    }
    public string error;
    public List<File> file;

    public CodeGeneratorResponse ()
    {
        this.error = "";
        this.file = new List<File> ();
    }

    public CodeGeneratorResponse.from_data (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        decode (buffer, data_length);
    }

    public override bool decode (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        size_t end;
        if (data_length < 0)
            end = buffer.buffer.length;
        else
            end = buffer.read_index + data_length;

        this.error = "";
        this.file = new List<File> ();
        while (buffer.read_index < end)
        {
            var key = buffer.decode_varint ();
            var wire_type = key & 0x7;
            var field_number = key >> 3;

            if (field_number == 1 && wire_type == 2)
                this.error = buffer.decode_string ((size_t) buffer.decode_varint ());
            else if (field_number == 15 && wire_type == 2)
                this.file.append (new File.from_data (buffer, (ssize_t) buffer.decode_varint ()));
            else
                this.unknown_fields.prepend (buffer.decode_unknown_field (key));
        }

        if (buffer.read_index != end)
            buffer.error = true;

        return !buffer.error;
    }

    public override size_t encode (Protobuf.EncodeBuffer buffer)
    {
        size_t n_written = 0;

        foreach (var f in this.unknown_fields)
            n_written += buffer.encode_unknown_field (f);
        for (unowned List<File> i = this.file.last (); i != null; i = i.prev)
        {
            var file_length = i.data.encode (buffer);
            n_written += file_length;
            n_written += buffer.encode_varint (file_length);
            n_written += buffer.encode_varint (122);
        }
        if (this.error != "")
        {
            var error_length = buffer.encode_string (this.error);
            n_written += error_length;
            n_written += buffer.encode_varint (error_length);
            n_written += buffer.encode_varint (10);
        }

        return n_written;
    }

    public override string to_string (string indent = "")
    {
        var text = "";

        text += indent + "error: %s\n".printf (Protobuf.string_to_string (this.error));
        foreach (unowned File v in this.file)
        {
            text += indent + "file {\n";
            text += "%s".printf (v.to_string (indent + "  "));
            text += indent + "}\n";
        }

        return text;
    }
}
