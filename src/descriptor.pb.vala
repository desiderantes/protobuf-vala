// Generated by protoc-gen-vala 0.0.7 from google/protobuf/descriptor.proto, do not edit

public class FileDescriptorSet : Protobuf.Message
{
    public List<FileDescriptorProto> file = null;

    public FileDescriptorSet.from_data (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        decode (buffer, data_length);
    }

    public override bool decode (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        size_t end;
        if (data_length < 0)
            end = buffer.buffer.length;
        else
            end = buffer.read_index + data_length;

        while (buffer.read_index < end)
        {
            var key = buffer.decode_varint ();
            var wire_type = key & 0x7;
            var field_number = key >> 3;

            if (field_number == 1 && wire_type == 2)
                this.file.append (new FileDescriptorProto.from_data (buffer, (ssize_t) buffer.decode_varint ()));
            else
                buffer.decode_unknown (wire_type);
        }

        if (buffer.read_index != end)
            buffer.error = true;

        return !buffer.error;
    }

    public override size_t encode (Protobuf.EncodeBuffer buffer)
    {
        size_t n_written = 0;

        for (unowned List<FileDescriptorProto> i = this.file.last (); i != null; i = i.prev)
        {
            var file_length = i.data.encode (buffer);
            n_written += file_length;
            n_written += buffer.encode_varint (file_length);
            n_written += buffer.encode_varint (10);
        }

        return n_written;
    }

    public override string to_string (string indent = "")
    {
        var text = "";

        foreach (unowned FileDescriptorProto v in this.file)
        {
            text += indent + "file {\n";
            text += "%s".printf (v.to_string (indent + "  "));
            text += indent + "}\n";
        }

        return text;
    }
}

public class FileDescriptorProto : Protobuf.Message
{
    public string name = "";
    public string package = "";
    public List<string> dependency = null;
    public List<DescriptorProto> message_type = null;
    public List<EnumDescriptorProto> enum_type = null;
    public List<ServiceDescriptorProto> service = null;
    public List<FieldDescriptorProto> extension = null;
    public FileOptions? options = null;
    public SourceCodeInfo? source_code_info = null;

    public FileDescriptorProto.from_data (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        decode (buffer, data_length);
    }

    public override bool decode (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        size_t end;
        if (data_length < 0)
            end = buffer.buffer.length;
        else
            end = buffer.read_index + data_length;

        while (buffer.read_index < end)
        {
            var key = buffer.decode_varint ();
            var wire_type = key & 0x7;
            var field_number = key >> 3;

            if (field_number == 1 && wire_type == 2)
                this.name = buffer.decode_string ((size_t) buffer.decode_varint ());
            else if (field_number == 2 && wire_type == 2)
                this.package = buffer.decode_string ((size_t) buffer.decode_varint ());
            else if (field_number == 3 && wire_type == 2)
                this.dependency.append (buffer.decode_string ((size_t) buffer.decode_varint ()));
            else if (field_number == 4 && wire_type == 2)
                this.message_type.append (new DescriptorProto.from_data (buffer, (ssize_t) buffer.decode_varint ()));
            else if (field_number == 5 && wire_type == 2)
                this.enum_type.append (new EnumDescriptorProto.from_data (buffer, (ssize_t) buffer.decode_varint ()));
            else if (field_number == 6 && wire_type == 2)
                this.service.append (new ServiceDescriptorProto.from_data (buffer, (ssize_t) buffer.decode_varint ()));
            else if (field_number == 7 && wire_type == 2)
                this.extension.append (new FieldDescriptorProto.from_data (buffer, (ssize_t) buffer.decode_varint ()));
            else if (field_number == 8 && wire_type == 2)
                this.options = new FileOptions.from_data (buffer, (ssize_t) buffer.decode_varint ());
            else if (field_number == 9 && wire_type == 2)
                this.source_code_info = new SourceCodeInfo.from_data (buffer, (ssize_t) buffer.decode_varint ());
            else
                buffer.decode_unknown (wire_type);
        }

        if (buffer.read_index != end)
            buffer.error = true;

        return !buffer.error;
    }

    public override size_t encode (Protobuf.EncodeBuffer buffer)
    {
        size_t n_written = 0;

        if (this.source_code_info != null)
        {
            var source_code_info_length = this.source_code_info.encode (buffer);
            n_written += source_code_info_length;
            n_written += buffer.encode_varint (source_code_info_length);
            n_written += buffer.encode_varint (74);
        }
        if (this.options != null)
        {
            var options_length = this.options.encode (buffer);
            n_written += options_length;
            n_written += buffer.encode_varint (options_length);
            n_written += buffer.encode_varint (66);
        }
        for (unowned List<FieldDescriptorProto> i = this.extension.last (); i != null; i = i.prev)
        {
            var extension_length = i.data.encode (buffer);
            n_written += extension_length;
            n_written += buffer.encode_varint (extension_length);
            n_written += buffer.encode_varint (58);
        }
        for (unowned List<ServiceDescriptorProto> i = this.service.last (); i != null; i = i.prev)
        {
            var service_length = i.data.encode (buffer);
            n_written += service_length;
            n_written += buffer.encode_varint (service_length);
            n_written += buffer.encode_varint (50);
        }
        for (unowned List<EnumDescriptorProto> i = this.enum_type.last (); i != null; i = i.prev)
        {
            var enum_type_length = i.data.encode (buffer);
            n_written += enum_type_length;
            n_written += buffer.encode_varint (enum_type_length);
            n_written += buffer.encode_varint (42);
        }
        for (unowned List<DescriptorProto> i = this.message_type.last (); i != null; i = i.prev)
        {
            var message_type_length = i.data.encode (buffer);
            n_written += message_type_length;
            n_written += buffer.encode_varint (message_type_length);
            n_written += buffer.encode_varint (34);
        }
        for (unowned List<string> i = this.dependency.last (); i != null; i = i.prev)
        {
            var dependency_length = buffer.encode_string (i.data);
            n_written += dependency_length;
            n_written += buffer.encode_varint (dependency_length);
            n_written += buffer.encode_varint (26);
        }
        if (this.package != "")
        {
            var package_length = buffer.encode_string (this.package);
            n_written += package_length;
            n_written += buffer.encode_varint (package_length);
            n_written += buffer.encode_varint (18);
        }
        if (this.name != "")
        {
            var name_length = buffer.encode_string (this.name);
            n_written += name_length;
            n_written += buffer.encode_varint (name_length);
            n_written += buffer.encode_varint (10);
        }

        return n_written;
    }

    public override string to_string (string indent = "")
    {
        var text = "";

        text += indent + "name: %s\n".printf (Protobuf.string_to_string (this.name));
        text += indent + "package: %s\n".printf (Protobuf.string_to_string (this.package));
        foreach (unowned string v in this.dependency)
        {
            text += indent + "dependency: %s\n".printf (Protobuf.string_to_string (v));
        }
        foreach (unowned DescriptorProto v in this.message_type)
        {
            text += indent + "message_type {\n";
            text += "%s".printf (v.to_string (indent + "  "));
            text += indent + "}\n";
        }
        foreach (unowned EnumDescriptorProto v in this.enum_type)
        {
            text += indent + "enum_type {\n";
            text += "%s".printf (v.to_string (indent + "  "));
            text += indent + "}\n";
        }
        foreach (unowned ServiceDescriptorProto v in this.service)
        {
            text += indent + "service {\n";
            text += "%s".printf (v.to_string (indent + "  "));
            text += indent + "}\n";
        }
        foreach (unowned FieldDescriptorProto v in this.extension)
        {
            text += indent + "extension {\n";
            text += "%s".printf (v.to_string (indent + "  "));
            text += indent + "}\n";
        }
        if (options != null)
        {
            text += indent + "options {\n";
            text += "%s".printf (this.options.to_string (indent + "  "));
            text += indent + "}\n";
        }
        if (source_code_info != null)
        {
            text += indent + "source_code_info {\n";
            text += "%s".printf (this.source_code_info.to_string (indent + "  "));
            text += indent + "}\n";
        }

        return text;
    }
}

public class DescriptorProto : Protobuf.Message
{
    public class ExtensionRange : Protobuf.Message
    {
        public int32 start = 0;
        public int32 end = 0;

        public ExtensionRange.from_data (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
        {
            decode (buffer, data_length);
        }

        public override bool decode (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
        {
            size_t end;
            if (data_length < 0)
                end = buffer.buffer.length;
            else
                end = buffer.read_index + data_length;

            while (buffer.read_index < end)
            {
                var key = buffer.decode_varint ();
                var wire_type = key & 0x7;
                var field_number = key >> 3;

                if (field_number == 1 && wire_type == 0)
                    this.start = buffer.decode_int32 ();
                else if (field_number == 2 && wire_type == 0)
                    this.end = buffer.decode_int32 ();
                else
                    buffer.decode_unknown (wire_type);
            }

            if (buffer.read_index != end)
                buffer.error = true;

            return !buffer.error;
        }

        public override size_t encode (Protobuf.EncodeBuffer buffer)
        {
            size_t n_written = 0;

            if (this.end != 0)
            {
                n_written += buffer.encode_int32 (this.end);
                n_written += buffer.encode_varint (16);
            }
            if (this.start != 0)
            {
                n_written += buffer.encode_int32 (this.start);
                n_written += buffer.encode_varint (8);
            }

            return n_written;
        }

        public override string to_string (string indent = "")
        {
            var text = "";

            text += indent + "start: %s\n".printf (this.start.to_string ());
            text += indent + "end: %s\n".printf (this.end.to_string ());

            return text;
        }
    }
    public string name = "";
    public List<FieldDescriptorProto> field = null;
    public List<FieldDescriptorProto> extension = null;
    public List<DescriptorProto> nested_type = null;
    public List<EnumDescriptorProto> enum_type = null;
    public List<ExtensionRange> extension_range = null;
    public MessageOptions? options = null;

    public DescriptorProto.from_data (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        decode (buffer, data_length);
    }

    public override bool decode (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        size_t end;
        if (data_length < 0)
            end = buffer.buffer.length;
        else
            end = buffer.read_index + data_length;

        while (buffer.read_index < end)
        {
            var key = buffer.decode_varint ();
            var wire_type = key & 0x7;
            var field_number = key >> 3;

            if (field_number == 1 && wire_type == 2)
                this.name = buffer.decode_string ((size_t) buffer.decode_varint ());
            else if (field_number == 2 && wire_type == 2)
                this.field.append (new FieldDescriptorProto.from_data (buffer, (ssize_t) buffer.decode_varint ()));
            else if (field_number == 6 && wire_type == 2)
                this.extension.append (new FieldDescriptorProto.from_data (buffer, (ssize_t) buffer.decode_varint ()));
            else if (field_number == 3 && wire_type == 2)
                this.nested_type.append (new DescriptorProto.from_data (buffer, (ssize_t) buffer.decode_varint ()));
            else if (field_number == 4 && wire_type == 2)
                this.enum_type.append (new EnumDescriptorProto.from_data (buffer, (ssize_t) buffer.decode_varint ()));
            else if (field_number == 5 && wire_type == 2)
                this.extension_range.append (new ExtensionRange.from_data (buffer, (ssize_t) buffer.decode_varint ()));
            else if (field_number == 7 && wire_type == 2)
                this.options = new MessageOptions.from_data (buffer, (ssize_t) buffer.decode_varint ());
            else
                buffer.decode_unknown (wire_type);
        }

        if (buffer.read_index != end)
            buffer.error = true;

        return !buffer.error;
    }

    public override size_t encode (Protobuf.EncodeBuffer buffer)
    {
        size_t n_written = 0;

        if (this.options != null)
        {
            var options_length = this.options.encode (buffer);
            n_written += options_length;
            n_written += buffer.encode_varint (options_length);
            n_written += buffer.encode_varint (58);
        }
        for (unowned List<ExtensionRange> i = this.extension_range.last (); i != null; i = i.prev)
        {
            var extension_range_length = i.data.encode (buffer);
            n_written += extension_range_length;
            n_written += buffer.encode_varint (extension_range_length);
            n_written += buffer.encode_varint (42);
        }
        for (unowned List<EnumDescriptorProto> i = this.enum_type.last (); i != null; i = i.prev)
        {
            var enum_type_length = i.data.encode (buffer);
            n_written += enum_type_length;
            n_written += buffer.encode_varint (enum_type_length);
            n_written += buffer.encode_varint (34);
        }
        for (unowned List<DescriptorProto> i = this.nested_type.last (); i != null; i = i.prev)
        {
            var nested_type_length = i.data.encode (buffer);
            n_written += nested_type_length;
            n_written += buffer.encode_varint (nested_type_length);
            n_written += buffer.encode_varint (26);
        }
        for (unowned List<FieldDescriptorProto> i = this.extension.last (); i != null; i = i.prev)
        {
            var extension_length = i.data.encode (buffer);
            n_written += extension_length;
            n_written += buffer.encode_varint (extension_length);
            n_written += buffer.encode_varint (50);
        }
        for (unowned List<FieldDescriptorProto> i = this.field.last (); i != null; i = i.prev)
        {
            var field_length = i.data.encode (buffer);
            n_written += field_length;
            n_written += buffer.encode_varint (field_length);
            n_written += buffer.encode_varint (18);
        }
        if (this.name != "")
        {
            var name_length = buffer.encode_string (this.name);
            n_written += name_length;
            n_written += buffer.encode_varint (name_length);
            n_written += buffer.encode_varint (10);
        }

        return n_written;
    }

    public override string to_string (string indent = "")
    {
        var text = "";

        text += indent + "name: %s\n".printf (Protobuf.string_to_string (this.name));
        foreach (unowned FieldDescriptorProto v in this.field)
        {
            text += indent + "field {\n";
            text += "%s".printf (v.to_string (indent + "  "));
            text += indent + "}\n";
        }
        foreach (unowned FieldDescriptorProto v in this.extension)
        {
            text += indent + "extension {\n";
            text += "%s".printf (v.to_string (indent + "  "));
            text += indent + "}\n";
        }
        foreach (unowned DescriptorProto v in this.nested_type)
        {
            text += indent + "nested_type {\n";
            text += "%s".printf (v.to_string (indent + "  "));
            text += indent + "}\n";
        }
        foreach (unowned EnumDescriptorProto v in this.enum_type)
        {
            text += indent + "enum_type {\n";
            text += "%s".printf (v.to_string (indent + "  "));
            text += indent + "}\n";
        }
        foreach (unowned ExtensionRange v in this.extension_range)
        {
            text += indent + "extension_range {\n";
            text += "%s".printf (v.to_string (indent + "  "));
            text += indent + "}\n";
        }
        if (options != null)
        {
            text += indent + "options {\n";
            text += "%s".printf (this.options.to_string (indent + "  "));
            text += indent + "}\n";
        }

        return text;
    }
}

public class FieldDescriptorProto : Protobuf.Message
{
    public enum Type
    {
        TYPE_DOUBLE = 1,
        TYPE_FLOAT = 2,
        TYPE_INT64 = 3,
        TYPE_UINT64 = 4,
        TYPE_INT32 = 5,
        TYPE_FIXED64 = 6,
        TYPE_FIXED32 = 7,
        TYPE_BOOL = 8,
        TYPE_STRING = 9,
        TYPE_GROUP = 10,
        TYPE_MESSAGE = 11,
        TYPE_BYTES = 12,
        TYPE_UINT32 = 13,
        TYPE_ENUM = 14,
        TYPE_SFIXED32 = 15,
        TYPE_SFIXED64 = 16,
        TYPE_SINT32 = 17,
        TYPE_SINT64 = 18,
    }
    public static string Type_to_string (Type value)
    {
        switch (value)
        {
        case Type.TYPE_DOUBLE:
            return "TYPE_DOUBLE";
        case Type.TYPE_FLOAT:
            return "TYPE_FLOAT";
        case Type.TYPE_INT64:
            return "TYPE_INT64";
        case Type.TYPE_UINT64:
            return "TYPE_UINT64";
        case Type.TYPE_INT32:
            return "TYPE_INT32";
        case Type.TYPE_FIXED64:
            return "TYPE_FIXED64";
        case Type.TYPE_FIXED32:
            return "TYPE_FIXED32";
        case Type.TYPE_BOOL:
            return "TYPE_BOOL";
        case Type.TYPE_STRING:
            return "TYPE_STRING";
        case Type.TYPE_GROUP:
            return "TYPE_GROUP";
        case Type.TYPE_MESSAGE:
            return "TYPE_MESSAGE";
        case Type.TYPE_BYTES:
            return "TYPE_BYTES";
        case Type.TYPE_UINT32:
            return "TYPE_UINT32";
        case Type.TYPE_ENUM:
            return "TYPE_ENUM";
        case Type.TYPE_SFIXED32:
            return "TYPE_SFIXED32";
        case Type.TYPE_SFIXED64:
            return "TYPE_SFIXED64";
        case Type.TYPE_SINT32:
            return "TYPE_SINT32";
        case Type.TYPE_SINT64:
            return "TYPE_SINT64";
        default:
            return "%d".printf (value);
        }
    }
    public enum Label
    {
        LABEL_OPTIONAL = 1,
        LABEL_REQUIRED = 2,
        LABEL_REPEATED = 3,
    }
    public static string Label_to_string (Label value)
    {
        switch (value)
        {
        case Label.LABEL_OPTIONAL:
            return "LABEL_OPTIONAL";
        case Label.LABEL_REQUIRED:
            return "LABEL_REQUIRED";
        case Label.LABEL_REPEATED:
            return "LABEL_REPEATED";
        default:
            return "%d".printf (value);
        }
    }
    public string name = "";
    public int32 number = 0;
    public Label label = 0;
    public Type type = 0;
    public string type_name = "";
    public string extendee = "";
    public string default_value = "";
    public FieldOptions? options = null;

    public FieldDescriptorProto.from_data (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        decode (buffer, data_length);
    }

    public override bool decode (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        size_t end;
        if (data_length < 0)
            end = buffer.buffer.length;
        else
            end = buffer.read_index + data_length;

        while (buffer.read_index < end)
        {
            var key = buffer.decode_varint ();
            var wire_type = key & 0x7;
            var field_number = key >> 3;

            if (field_number == 1 && wire_type == 2)
                this.name = buffer.decode_string ((size_t) buffer.decode_varint ());
            else if (field_number == 3 && wire_type == 0)
                this.number = buffer.decode_int32 ();
            else if (field_number == 4 && wire_type == 0)
                this.label = (Label) buffer.decode_varint ();
            else if (field_number == 5 && wire_type == 0)
                this.type = (Type) buffer.decode_varint ();
            else if (field_number == 6 && wire_type == 2)
                this.type_name = buffer.decode_string ((size_t) buffer.decode_varint ());
            else if (field_number == 2 && wire_type == 2)
                this.extendee = buffer.decode_string ((size_t) buffer.decode_varint ());
            else if (field_number == 7 && wire_type == 2)
                this.default_value = buffer.decode_string ((size_t) buffer.decode_varint ());
            else if (field_number == 8 && wire_type == 2)
                this.options = new FieldOptions.from_data (buffer, (ssize_t) buffer.decode_varint ());
            else
                buffer.decode_unknown (wire_type);
        }

        if (buffer.read_index != end)
            buffer.error = true;

        return !buffer.error;
    }

    public override size_t encode (Protobuf.EncodeBuffer buffer)
    {
        size_t n_written = 0;

        if (this.options != null)
        {
            var options_length = this.options.encode (buffer);
            n_written += options_length;
            n_written += buffer.encode_varint (options_length);
            n_written += buffer.encode_varint (66);
        }
        if (this.default_value != "")
        {
            var default_value_length = buffer.encode_string (this.default_value);
            n_written += default_value_length;
            n_written += buffer.encode_varint (default_value_length);
            n_written += buffer.encode_varint (58);
        }
        if (this.extendee != "")
        {
            var extendee_length = buffer.encode_string (this.extendee);
            n_written += extendee_length;
            n_written += buffer.encode_varint (extendee_length);
            n_written += buffer.encode_varint (18);
        }
        if (this.type_name != "")
        {
            var type_name_length = buffer.encode_string (this.type_name);
            n_written += type_name_length;
            n_written += buffer.encode_varint (type_name_length);
            n_written += buffer.encode_varint (50);
        }
        if (this.type != 0)
        {
            n_written += buffer.encode_varint (this.type);
            n_written += buffer.encode_varint (40);
        }
        if (this.label != 0)
        {
            n_written += buffer.encode_varint (this.label);
            n_written += buffer.encode_varint (32);
        }
        if (this.number != 0)
        {
            n_written += buffer.encode_int32 (this.number);
            n_written += buffer.encode_varint (24);
        }
        if (this.name != "")
        {
            var name_length = buffer.encode_string (this.name);
            n_written += name_length;
            n_written += buffer.encode_varint (name_length);
            n_written += buffer.encode_varint (10);
        }

        return n_written;
    }

    public override string to_string (string indent = "")
    {
        var text = "";

        text += indent + "name: %s\n".printf (Protobuf.string_to_string (this.name));
        text += indent + "number: %s\n".printf (this.number.to_string ());
        text += indent + "label: %s\n".printf (Label_to_string (this.label));
        text += indent + "type: %s\n".printf (Type_to_string (this.type));
        text += indent + "type_name: %s\n".printf (Protobuf.string_to_string (this.type_name));
        text += indent + "extendee: %s\n".printf (Protobuf.string_to_string (this.extendee));
        text += indent + "default_value: %s\n".printf (Protobuf.string_to_string (this.default_value));
        if (options != null)
        {
            text += indent + "options {\n";
            text += "%s".printf (this.options.to_string (indent + "  "));
            text += indent + "}\n";
        }

        return text;
    }
}

public class EnumDescriptorProto : Protobuf.Message
{
    public string name = "";
    public List<EnumValueDescriptorProto> value = null;
    public EnumOptions? options = null;

    public EnumDescriptorProto.from_data (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        decode (buffer, data_length);
    }

    public override bool decode (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        size_t end;
        if (data_length < 0)
            end = buffer.buffer.length;
        else
            end = buffer.read_index + data_length;

        while (buffer.read_index < end)
        {
            var key = buffer.decode_varint ();
            var wire_type = key & 0x7;
            var field_number = key >> 3;

            if (field_number == 1 && wire_type == 2)
                this.name = buffer.decode_string ((size_t) buffer.decode_varint ());
            else if (field_number == 2 && wire_type == 2)
                this.value.append (new EnumValueDescriptorProto.from_data (buffer, (ssize_t) buffer.decode_varint ()));
            else if (field_number == 3 && wire_type == 2)
                this.options = new EnumOptions.from_data (buffer, (ssize_t) buffer.decode_varint ());
            else
                buffer.decode_unknown (wire_type);
        }

        if (buffer.read_index != end)
            buffer.error = true;

        return !buffer.error;
    }

    public override size_t encode (Protobuf.EncodeBuffer buffer)
    {
        size_t n_written = 0;

        if (this.options != null)
        {
            var options_length = this.options.encode (buffer);
            n_written += options_length;
            n_written += buffer.encode_varint (options_length);
            n_written += buffer.encode_varint (26);
        }
        for (unowned List<EnumValueDescriptorProto> i = this.value.last (); i != null; i = i.prev)
        {
            var value_length = i.data.encode (buffer);
            n_written += value_length;
            n_written += buffer.encode_varint (value_length);
            n_written += buffer.encode_varint (18);
        }
        if (this.name != "")
        {
            var name_length = buffer.encode_string (this.name);
            n_written += name_length;
            n_written += buffer.encode_varint (name_length);
            n_written += buffer.encode_varint (10);
        }

        return n_written;
    }

    public override string to_string (string indent = "")
    {
        var text = "";

        text += indent + "name: %s\n".printf (Protobuf.string_to_string (this.name));
        foreach (unowned EnumValueDescriptorProto v in this.value)
        {
            text += indent + "value {\n";
            text += "%s".printf (v.to_string (indent + "  "));
            text += indent + "}\n";
        }
        if (options != null)
        {
            text += indent + "options {\n";
            text += "%s".printf (this.options.to_string (indent + "  "));
            text += indent + "}\n";
        }

        return text;
    }
}

public class EnumValueDescriptorProto : Protobuf.Message
{
    public string name = "";
    public int32 number = 0;
    public EnumValueOptions? options = null;

    public EnumValueDescriptorProto.from_data (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        decode (buffer, data_length);
    }

    public override bool decode (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        size_t end;
        if (data_length < 0)
            end = buffer.buffer.length;
        else
            end = buffer.read_index + data_length;

        while (buffer.read_index < end)
        {
            var key = buffer.decode_varint ();
            var wire_type = key & 0x7;
            var field_number = key >> 3;

            if (field_number == 1 && wire_type == 2)
                this.name = buffer.decode_string ((size_t) buffer.decode_varint ());
            else if (field_number == 2 && wire_type == 0)
                this.number = buffer.decode_int32 ();
            else if (field_number == 3 && wire_type == 2)
                this.options = new EnumValueOptions.from_data (buffer, (ssize_t) buffer.decode_varint ());
            else
                buffer.decode_unknown (wire_type);
        }

        if (buffer.read_index != end)
            buffer.error = true;

        return !buffer.error;
    }

    public override size_t encode (Protobuf.EncodeBuffer buffer)
    {
        size_t n_written = 0;

        if (this.options != null)
        {
            var options_length = this.options.encode (buffer);
            n_written += options_length;
            n_written += buffer.encode_varint (options_length);
            n_written += buffer.encode_varint (26);
        }
        if (this.number != 0)
        {
            n_written += buffer.encode_int32 (this.number);
            n_written += buffer.encode_varint (16);
        }
        if (this.name != "")
        {
            var name_length = buffer.encode_string (this.name);
            n_written += name_length;
            n_written += buffer.encode_varint (name_length);
            n_written += buffer.encode_varint (10);
        }

        return n_written;
    }

    public override string to_string (string indent = "")
    {
        var text = "";

        text += indent + "name: %s\n".printf (Protobuf.string_to_string (this.name));
        text += indent + "number: %s\n".printf (this.number.to_string ());
        if (options != null)
        {
            text += indent + "options {\n";
            text += "%s".printf (this.options.to_string (indent + "  "));
            text += indent + "}\n";
        }

        return text;
    }
}

public class ServiceDescriptorProto : Protobuf.Message
{
    public string name = "";
    public List<MethodDescriptorProto> method = null;
    public ServiceOptions? options = null;

    public ServiceDescriptorProto.from_data (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        decode (buffer, data_length);
    }

    public override bool decode (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        size_t end;
        if (data_length < 0)
            end = buffer.buffer.length;
        else
            end = buffer.read_index + data_length;

        while (buffer.read_index < end)
        {
            var key = buffer.decode_varint ();
            var wire_type = key & 0x7;
            var field_number = key >> 3;

            if (field_number == 1 && wire_type == 2)
                this.name = buffer.decode_string ((size_t) buffer.decode_varint ());
            else if (field_number == 2 && wire_type == 2)
                this.method.append (new MethodDescriptorProto.from_data (buffer, (ssize_t) buffer.decode_varint ()));
            else if (field_number == 3 && wire_type == 2)
                this.options = new ServiceOptions.from_data (buffer, (ssize_t) buffer.decode_varint ());
            else
                buffer.decode_unknown (wire_type);
        }

        if (buffer.read_index != end)
            buffer.error = true;

        return !buffer.error;
    }

    public override size_t encode (Protobuf.EncodeBuffer buffer)
    {
        size_t n_written = 0;

        if (this.options != null)
        {
            var options_length = this.options.encode (buffer);
            n_written += options_length;
            n_written += buffer.encode_varint (options_length);
            n_written += buffer.encode_varint (26);
        }
        for (unowned List<MethodDescriptorProto> i = this.method.last (); i != null; i = i.prev)
        {
            var method_length = i.data.encode (buffer);
            n_written += method_length;
            n_written += buffer.encode_varint (method_length);
            n_written += buffer.encode_varint (18);
        }
        if (this.name != "")
        {
            var name_length = buffer.encode_string (this.name);
            n_written += name_length;
            n_written += buffer.encode_varint (name_length);
            n_written += buffer.encode_varint (10);
        }

        return n_written;
    }

    public override string to_string (string indent = "")
    {
        var text = "";

        text += indent + "name: %s\n".printf (Protobuf.string_to_string (this.name));
        foreach (unowned MethodDescriptorProto v in this.method)
        {
            text += indent + "method {\n";
            text += "%s".printf (v.to_string (indent + "  "));
            text += indent + "}\n";
        }
        if (options != null)
        {
            text += indent + "options {\n";
            text += "%s".printf (this.options.to_string (indent + "  "));
            text += indent + "}\n";
        }

        return text;
    }
}

public class MethodDescriptorProto : Protobuf.Message
{
    public string name = "";
    public string input_type = "";
    public string output_type = "";
    public MethodOptions? options = null;

    public MethodDescriptorProto.from_data (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        decode (buffer, data_length);
    }

    public override bool decode (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        size_t end;
        if (data_length < 0)
            end = buffer.buffer.length;
        else
            end = buffer.read_index + data_length;

        while (buffer.read_index < end)
        {
            var key = buffer.decode_varint ();
            var wire_type = key & 0x7;
            var field_number = key >> 3;

            if (field_number == 1 && wire_type == 2)
                this.name = buffer.decode_string ((size_t) buffer.decode_varint ());
            else if (field_number == 2 && wire_type == 2)
                this.input_type = buffer.decode_string ((size_t) buffer.decode_varint ());
            else if (field_number == 3 && wire_type == 2)
                this.output_type = buffer.decode_string ((size_t) buffer.decode_varint ());
            else if (field_number == 4 && wire_type == 2)
                this.options = new MethodOptions.from_data (buffer, (ssize_t) buffer.decode_varint ());
            else
                buffer.decode_unknown (wire_type);
        }

        if (buffer.read_index != end)
            buffer.error = true;

        return !buffer.error;
    }

    public override size_t encode (Protobuf.EncodeBuffer buffer)
    {
        size_t n_written = 0;

        if (this.options != null)
        {
            var options_length = this.options.encode (buffer);
            n_written += options_length;
            n_written += buffer.encode_varint (options_length);
            n_written += buffer.encode_varint (34);
        }
        if (this.output_type != "")
        {
            var output_type_length = buffer.encode_string (this.output_type);
            n_written += output_type_length;
            n_written += buffer.encode_varint (output_type_length);
            n_written += buffer.encode_varint (26);
        }
        if (this.input_type != "")
        {
            var input_type_length = buffer.encode_string (this.input_type);
            n_written += input_type_length;
            n_written += buffer.encode_varint (input_type_length);
            n_written += buffer.encode_varint (18);
        }
        if (this.name != "")
        {
            var name_length = buffer.encode_string (this.name);
            n_written += name_length;
            n_written += buffer.encode_varint (name_length);
            n_written += buffer.encode_varint (10);
        }

        return n_written;
    }

    public override string to_string (string indent = "")
    {
        var text = "";

        text += indent + "name: %s\n".printf (Protobuf.string_to_string (this.name));
        text += indent + "input_type: %s\n".printf (Protobuf.string_to_string (this.input_type));
        text += indent + "output_type: %s\n".printf (Protobuf.string_to_string (this.output_type));
        if (options != null)
        {
            text += indent + "options {\n";
            text += "%s".printf (this.options.to_string (indent + "  "));
            text += indent + "}\n";
        }

        return text;
    }
}

public class FileOptions : Protobuf.Message
{
    public enum OptimizeMode
    {
        SPEED = 1,
        CODE_SIZE = 2,
        LITE_RUNTIME = 3,
    }
    public static string OptimizeMode_to_string (OptimizeMode value)
    {
        switch (value)
        {
        case OptimizeMode.SPEED:
            return "SPEED";
        case OptimizeMode.CODE_SIZE:
            return "CODE_SIZE";
        case OptimizeMode.LITE_RUNTIME:
            return "LITE_RUNTIME";
        default:
            return "%d".printf (value);
        }
    }
    public string java_package = "";
    public string java_outer_classname = "";
    public bool java_multiple_files = false;
    public bool java_generate_equals_and_hash = false;
    public OptimizeMode optimize_for = OptimizeMode.SPEED;
    public bool cc_generic_services = false;
    public bool java_generic_services = false;
    public bool py_generic_services = false;
    public List<UninterpretedOption> uninterpreted_option = null;

    public FileOptions.from_data (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        decode (buffer, data_length);
    }

    public override bool decode (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        size_t end;
        if (data_length < 0)
            end = buffer.buffer.length;
        else
            end = buffer.read_index + data_length;

        while (buffer.read_index < end)
        {
            var key = buffer.decode_varint ();
            var wire_type = key & 0x7;
            var field_number = key >> 3;

            if (field_number == 1 && wire_type == 2)
                this.java_package = buffer.decode_string ((size_t) buffer.decode_varint ());
            else if (field_number == 8 && wire_type == 2)
                this.java_outer_classname = buffer.decode_string ((size_t) buffer.decode_varint ());
            else if (field_number == 10 && wire_type == 0)
                this.java_multiple_files = buffer.decode_bool ();
            else if (field_number == 20 && wire_type == 0)
                this.java_generate_equals_and_hash = buffer.decode_bool ();
            else if (field_number == 9 && wire_type == 0)
                this.optimize_for = (OptimizeMode) buffer.decode_varint ();
            else if (field_number == 16 && wire_type == 0)
                this.cc_generic_services = buffer.decode_bool ();
            else if (field_number == 17 && wire_type == 0)
                this.java_generic_services = buffer.decode_bool ();
            else if (field_number == 18 && wire_type == 0)
                this.py_generic_services = buffer.decode_bool ();
            else if (field_number == 999 && wire_type == 2)
                this.uninterpreted_option.append (new UninterpretedOption.from_data (buffer, (ssize_t) buffer.decode_varint ()));
            else
                buffer.decode_unknown (wire_type);
        }

        if (buffer.read_index != end)
            buffer.error = true;

        return !buffer.error;
    }

    public override size_t encode (Protobuf.EncodeBuffer buffer)
    {
        size_t n_written = 0;

        for (unowned List<UninterpretedOption> i = this.uninterpreted_option.last (); i != null; i = i.prev)
        {
            var uninterpreted_option_length = i.data.encode (buffer);
            n_written += uninterpreted_option_length;
            n_written += buffer.encode_varint (uninterpreted_option_length);
            n_written += buffer.encode_varint (7994);
        }
        if (this.py_generic_services != false)
        {
            n_written += buffer.encode_bool (this.py_generic_services);
            n_written += buffer.encode_varint (144);
        }
        if (this.java_generic_services != false)
        {
            n_written += buffer.encode_bool (this.java_generic_services);
            n_written += buffer.encode_varint (136);
        }
        if (this.cc_generic_services != false)
        {
            n_written += buffer.encode_bool (this.cc_generic_services);
            n_written += buffer.encode_varint (128);
        }
        if (this.optimize_for != OptimizeMode.SPEED)
        {
            n_written += buffer.encode_varint (this.optimize_for);
            n_written += buffer.encode_varint (72);
        }
        if (this.java_generate_equals_and_hash != false)
        {
            n_written += buffer.encode_bool (this.java_generate_equals_and_hash);
            n_written += buffer.encode_varint (160);
        }
        if (this.java_multiple_files != false)
        {
            n_written += buffer.encode_bool (this.java_multiple_files);
            n_written += buffer.encode_varint (80);
        }
        if (this.java_outer_classname != "")
        {
            var java_outer_classname_length = buffer.encode_string (this.java_outer_classname);
            n_written += java_outer_classname_length;
            n_written += buffer.encode_varint (java_outer_classname_length);
            n_written += buffer.encode_varint (66);
        }
        if (this.java_package != "")
        {
            var java_package_length = buffer.encode_string (this.java_package);
            n_written += java_package_length;
            n_written += buffer.encode_varint (java_package_length);
            n_written += buffer.encode_varint (10);
        }

        return n_written;
    }

    public override string to_string (string indent = "")
    {
        var text = "";

        text += indent + "java_package: %s\n".printf (Protobuf.string_to_string (this.java_package));
        text += indent + "java_outer_classname: %s\n".printf (Protobuf.string_to_string (this.java_outer_classname));
        text += indent + "java_multiple_files: %s\n".printf (this.java_multiple_files.to_string ());
        text += indent + "java_generate_equals_and_hash: %s\n".printf (this.java_generate_equals_and_hash.to_string ());
        text += indent + "optimize_for: %s\n".printf (OptimizeMode_to_string (this.optimize_for));
        text += indent + "cc_generic_services: %s\n".printf (this.cc_generic_services.to_string ());
        text += indent + "java_generic_services: %s\n".printf (this.java_generic_services.to_string ());
        text += indent + "py_generic_services: %s\n".printf (this.py_generic_services.to_string ());
        foreach (unowned UninterpretedOption v in this.uninterpreted_option)
        {
            text += indent + "uninterpreted_option {\n";
            text += "%s".printf (v.to_string (indent + "  "));
            text += indent + "}\n";
        }

        return text;
    }
}

public class MessageOptions : Protobuf.Message
{
    public bool message_set_wire_format = false;
    public bool no_standard_descriptor_accessor = false;
    public List<UninterpretedOption> uninterpreted_option = null;

    public MessageOptions.from_data (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        decode (buffer, data_length);
    }

    public override bool decode (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        size_t end;
        if (data_length < 0)
            end = buffer.buffer.length;
        else
            end = buffer.read_index + data_length;

        while (buffer.read_index < end)
        {
            var key = buffer.decode_varint ();
            var wire_type = key & 0x7;
            var field_number = key >> 3;

            if (field_number == 1 && wire_type == 0)
                this.message_set_wire_format = buffer.decode_bool ();
            else if (field_number == 2 && wire_type == 0)
                this.no_standard_descriptor_accessor = buffer.decode_bool ();
            else if (field_number == 999 && wire_type == 2)
                this.uninterpreted_option.append (new UninterpretedOption.from_data (buffer, (ssize_t) buffer.decode_varint ()));
            else
                buffer.decode_unknown (wire_type);
        }

        if (buffer.read_index != end)
            buffer.error = true;

        return !buffer.error;
    }

    public override size_t encode (Protobuf.EncodeBuffer buffer)
    {
        size_t n_written = 0;

        for (unowned List<UninterpretedOption> i = this.uninterpreted_option.last (); i != null; i = i.prev)
        {
            var uninterpreted_option_length = i.data.encode (buffer);
            n_written += uninterpreted_option_length;
            n_written += buffer.encode_varint (uninterpreted_option_length);
            n_written += buffer.encode_varint (7994);
        }
        if (this.no_standard_descriptor_accessor != false)
        {
            n_written += buffer.encode_bool (this.no_standard_descriptor_accessor);
            n_written += buffer.encode_varint (16);
        }
        if (this.message_set_wire_format != false)
        {
            n_written += buffer.encode_bool (this.message_set_wire_format);
            n_written += buffer.encode_varint (8);
        }

        return n_written;
    }

    public override string to_string (string indent = "")
    {
        var text = "";

        text += indent + "message_set_wire_format: %s\n".printf (this.message_set_wire_format.to_string ());
        text += indent + "no_standard_descriptor_accessor: %s\n".printf (this.no_standard_descriptor_accessor.to_string ());
        foreach (unowned UninterpretedOption v in this.uninterpreted_option)
        {
            text += indent + "uninterpreted_option {\n";
            text += "%s".printf (v.to_string (indent + "  "));
            text += indent + "}\n";
        }

        return text;
    }
}

public class FieldOptions : Protobuf.Message
{
    public enum CType
    {
        STRING = 0,
        CORD = 1,
        STRING_PIECE = 2,
    }
    public static string CType_to_string (CType value)
    {
        switch (value)
        {
        case CType.STRING:
            return "STRING";
        case CType.CORD:
            return "CORD";
        case CType.STRING_PIECE:
            return "STRING_PIECE";
        default:
            return "%d".printf (value);
        }
    }
    public CType ctype = CType.STRING;
    public bool packed = false;
    public bool deprecated = false;
    public string experimental_map_key = "";
    public List<UninterpretedOption> uninterpreted_option = null;

    public FieldOptions.from_data (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        decode (buffer, data_length);
    }

    public override bool decode (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        size_t end;
        if (data_length < 0)
            end = buffer.buffer.length;
        else
            end = buffer.read_index + data_length;

        while (buffer.read_index < end)
        {
            var key = buffer.decode_varint ();
            var wire_type = key & 0x7;
            var field_number = key >> 3;

            if (field_number == 1 && wire_type == 0)
                this.ctype = (CType) buffer.decode_varint ();
            else if (field_number == 2 && wire_type == 0)
                this.packed = buffer.decode_bool ();
            else if (field_number == 3 && wire_type == 0)
                this.deprecated = buffer.decode_bool ();
            else if (field_number == 9 && wire_type == 2)
                this.experimental_map_key = buffer.decode_string ((size_t) buffer.decode_varint ());
            else if (field_number == 999 && wire_type == 2)
                this.uninterpreted_option.append (new UninterpretedOption.from_data (buffer, (ssize_t) buffer.decode_varint ()));
            else
                buffer.decode_unknown (wire_type);
        }

        if (buffer.read_index != end)
            buffer.error = true;

        return !buffer.error;
    }

    public override size_t encode (Protobuf.EncodeBuffer buffer)
    {
        size_t n_written = 0;

        for (unowned List<UninterpretedOption> i = this.uninterpreted_option.last (); i != null; i = i.prev)
        {
            var uninterpreted_option_length = i.data.encode (buffer);
            n_written += uninterpreted_option_length;
            n_written += buffer.encode_varint (uninterpreted_option_length);
            n_written += buffer.encode_varint (7994);
        }
        if (this.experimental_map_key != "")
        {
            var experimental_map_key_length = buffer.encode_string (this.experimental_map_key);
            n_written += experimental_map_key_length;
            n_written += buffer.encode_varint (experimental_map_key_length);
            n_written += buffer.encode_varint (74);
        }
        if (this.deprecated != false)
        {
            n_written += buffer.encode_bool (this.deprecated);
            n_written += buffer.encode_varint (24);
        }
        if (this.packed != false)
        {
            n_written += buffer.encode_bool (this.packed);
            n_written += buffer.encode_varint (16);
        }
        if (this.ctype != CType.STRING)
        {
            n_written += buffer.encode_varint (this.ctype);
            n_written += buffer.encode_varint (8);
        }

        return n_written;
    }

    public override string to_string (string indent = "")
    {
        var text = "";

        text += indent + "ctype: %s\n".printf (CType_to_string (this.ctype));
        text += indent + "packed: %s\n".printf (this.packed.to_string ());
        text += indent + "deprecated: %s\n".printf (this.deprecated.to_string ());
        text += indent + "experimental_map_key: %s\n".printf (Protobuf.string_to_string (this.experimental_map_key));
        foreach (unowned UninterpretedOption v in this.uninterpreted_option)
        {
            text += indent + "uninterpreted_option {\n";
            text += "%s".printf (v.to_string (indent + "  "));
            text += indent + "}\n";
        }

        return text;
    }
}

public class EnumOptions : Protobuf.Message
{
    public List<UninterpretedOption> uninterpreted_option = null;

    public EnumOptions.from_data (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        decode (buffer, data_length);
    }

    public override bool decode (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        size_t end;
        if (data_length < 0)
            end = buffer.buffer.length;
        else
            end = buffer.read_index + data_length;

        while (buffer.read_index < end)
        {
            var key = buffer.decode_varint ();
            var wire_type = key & 0x7;
            var field_number = key >> 3;

            if (field_number == 999 && wire_type == 2)
                this.uninterpreted_option.append (new UninterpretedOption.from_data (buffer, (ssize_t) buffer.decode_varint ()));
            else
                buffer.decode_unknown (wire_type);
        }

        if (buffer.read_index != end)
            buffer.error = true;

        return !buffer.error;
    }

    public override size_t encode (Protobuf.EncodeBuffer buffer)
    {
        size_t n_written = 0;

        for (unowned List<UninterpretedOption> i = this.uninterpreted_option.last (); i != null; i = i.prev)
        {
            var uninterpreted_option_length = i.data.encode (buffer);
            n_written += uninterpreted_option_length;
            n_written += buffer.encode_varint (uninterpreted_option_length);
            n_written += buffer.encode_varint (7994);
        }

        return n_written;
    }

    public override string to_string (string indent = "")
    {
        var text = "";

        foreach (unowned UninterpretedOption v in this.uninterpreted_option)
        {
            text += indent + "uninterpreted_option {\n";
            text += "%s".printf (v.to_string (indent + "  "));
            text += indent + "}\n";
        }

        return text;
    }
}

public class EnumValueOptions : Protobuf.Message
{
    public List<UninterpretedOption> uninterpreted_option = null;

    public EnumValueOptions.from_data (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        decode (buffer, data_length);
    }

    public override bool decode (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        size_t end;
        if (data_length < 0)
            end = buffer.buffer.length;
        else
            end = buffer.read_index + data_length;

        while (buffer.read_index < end)
        {
            var key = buffer.decode_varint ();
            var wire_type = key & 0x7;
            var field_number = key >> 3;

            if (field_number == 999 && wire_type == 2)
                this.uninterpreted_option.append (new UninterpretedOption.from_data (buffer, (ssize_t) buffer.decode_varint ()));
            else
                buffer.decode_unknown (wire_type);
        }

        if (buffer.read_index != end)
            buffer.error = true;

        return !buffer.error;
    }

    public override size_t encode (Protobuf.EncodeBuffer buffer)
    {
        size_t n_written = 0;

        for (unowned List<UninterpretedOption> i = this.uninterpreted_option.last (); i != null; i = i.prev)
        {
            var uninterpreted_option_length = i.data.encode (buffer);
            n_written += uninterpreted_option_length;
            n_written += buffer.encode_varint (uninterpreted_option_length);
            n_written += buffer.encode_varint (7994);
        }

        return n_written;
    }

    public override string to_string (string indent = "")
    {
        var text = "";

        foreach (unowned UninterpretedOption v in this.uninterpreted_option)
        {
            text += indent + "uninterpreted_option {\n";
            text += "%s".printf (v.to_string (indent + "  "));
            text += indent + "}\n";
        }

        return text;
    }
}

public class ServiceOptions : Protobuf.Message
{
    public List<UninterpretedOption> uninterpreted_option = null;

    public ServiceOptions.from_data (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        decode (buffer, data_length);
    }

    public override bool decode (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        size_t end;
        if (data_length < 0)
            end = buffer.buffer.length;
        else
            end = buffer.read_index + data_length;

        while (buffer.read_index < end)
        {
            var key = buffer.decode_varint ();
            var wire_type = key & 0x7;
            var field_number = key >> 3;

            if (field_number == 999 && wire_type == 2)
                this.uninterpreted_option.append (new UninterpretedOption.from_data (buffer, (ssize_t) buffer.decode_varint ()));
            else
                buffer.decode_unknown (wire_type);
        }

        if (buffer.read_index != end)
            buffer.error = true;

        return !buffer.error;
    }

    public override size_t encode (Protobuf.EncodeBuffer buffer)
    {
        size_t n_written = 0;

        for (unowned List<UninterpretedOption> i = this.uninterpreted_option.last (); i != null; i = i.prev)
        {
            var uninterpreted_option_length = i.data.encode (buffer);
            n_written += uninterpreted_option_length;
            n_written += buffer.encode_varint (uninterpreted_option_length);
            n_written += buffer.encode_varint (7994);
        }

        return n_written;
    }

    public override string to_string (string indent = "")
    {
        var text = "";

        foreach (unowned UninterpretedOption v in this.uninterpreted_option)
        {
            text += indent + "uninterpreted_option {\n";
            text += "%s".printf (v.to_string (indent + "  "));
            text += indent + "}\n";
        }

        return text;
    }
}

public class MethodOptions : Protobuf.Message
{
    public List<UninterpretedOption> uninterpreted_option = null;

    public MethodOptions.from_data (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        decode (buffer, data_length);
    }

    public override bool decode (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        size_t end;
        if (data_length < 0)
            end = buffer.buffer.length;
        else
            end = buffer.read_index + data_length;

        while (buffer.read_index < end)
        {
            var key = buffer.decode_varint ();
            var wire_type = key & 0x7;
            var field_number = key >> 3;

            if (field_number == 999 && wire_type == 2)
                this.uninterpreted_option.append (new UninterpretedOption.from_data (buffer, (ssize_t) buffer.decode_varint ()));
            else
                buffer.decode_unknown (wire_type);
        }

        if (buffer.read_index != end)
            buffer.error = true;

        return !buffer.error;
    }

    public override size_t encode (Protobuf.EncodeBuffer buffer)
    {
        size_t n_written = 0;

        for (unowned List<UninterpretedOption> i = this.uninterpreted_option.last (); i != null; i = i.prev)
        {
            var uninterpreted_option_length = i.data.encode (buffer);
            n_written += uninterpreted_option_length;
            n_written += buffer.encode_varint (uninterpreted_option_length);
            n_written += buffer.encode_varint (7994);
        }

        return n_written;
    }

    public override string to_string (string indent = "")
    {
        var text = "";

        foreach (unowned UninterpretedOption v in this.uninterpreted_option)
        {
            text += indent + "uninterpreted_option {\n";
            text += "%s".printf (v.to_string (indent + "  "));
            text += indent + "}\n";
        }

        return text;
    }
}

public class UninterpretedOption : Protobuf.Message
{
    public class NamePart : Protobuf.Message
    {
        public string name_part = "";
        public bool is_extension = false;

        public NamePart.from_data (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
        {
            decode (buffer, data_length);
        }

        public override bool decode (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
        {
            size_t end;
            if (data_length < 0)
                end = buffer.buffer.length;
            else
                end = buffer.read_index + data_length;
            var have_name_part = false;
            var have_is_extension = false;

            while (buffer.read_index < end)
            {
                var key = buffer.decode_varint ();
                var wire_type = key & 0x7;
                var field_number = key >> 3;

                if (field_number == 1 && wire_type == 2)
                {
                    this.name_part = buffer.decode_string ((size_t) buffer.decode_varint ());
                    have_name_part = true;
                }
                else if (field_number == 2 && wire_type == 0)
                {
                    this.is_extension = buffer.decode_bool ();
                    have_is_extension = true;
                }
                else
                    buffer.decode_unknown (wire_type);
            }

            if (buffer.read_index != end)
                buffer.error = true;
            else if (!have_name_part || !have_is_extension)
                buffer.error = true;

            return !buffer.error;
        }

        public override size_t encode (Protobuf.EncodeBuffer buffer)
        {
            size_t n_written = 0;

            n_written += buffer.encode_bool (this.is_extension);
            n_written += buffer.encode_varint (16);
            var name_part_length = buffer.encode_string (this.name_part);
            n_written += name_part_length;
            n_written += buffer.encode_varint (name_part_length);
            n_written += buffer.encode_varint (10);

            return n_written;
        }

        public override string to_string (string indent = "")
        {
            var text = "";

            text += indent + "name_part: %s\n".printf (Protobuf.string_to_string (this.name_part));
            text += indent + "is_extension: %s\n".printf (this.is_extension.to_string ());

            return text;
        }
    }
    public List<NamePart> name = null;
    public string identifier_value = "";
    public uint64 positive_int_value = 0;
    public int64 negative_int_value = 0;
    public double double_value = 0d;
    public GLib.ByteArray string_value = null;
    public string aggregate_value = "";

    public UninterpretedOption.from_data (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        decode (buffer, data_length);
    }

    public override bool decode (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        size_t end;
        if (data_length < 0)
            end = buffer.buffer.length;
        else
            end = buffer.read_index + data_length;

        while (buffer.read_index < end)
        {
            var key = buffer.decode_varint ();
            var wire_type = key & 0x7;
            var field_number = key >> 3;

            if (field_number == 2 && wire_type == 2)
                this.name.append (new NamePart.from_data (buffer, (ssize_t) buffer.decode_varint ()));
            else if (field_number == 3 && wire_type == 2)
                this.identifier_value = buffer.decode_string ((size_t) buffer.decode_varint ());
            else if (field_number == 4 && wire_type == 0)
                this.positive_int_value = buffer.decode_uint64 ();
            else if (field_number == 5 && wire_type == 0)
                this.negative_int_value = buffer.decode_int64 ();
            else if (field_number == 6 && wire_type == 1)
                this.double_value = buffer.decode_double ();
            else if (field_number == 7 && wire_type == 2)
                this.string_value = buffer.decode_bytes ((size_t) buffer.decode_varint ());
            else if (field_number == 8 && wire_type == 2)
                this.aggregate_value = buffer.decode_string ((size_t) buffer.decode_varint ());
            else
                buffer.decode_unknown (wire_type);
        }

        if (buffer.read_index != end)
            buffer.error = true;

        return !buffer.error;
    }

    public override size_t encode (Protobuf.EncodeBuffer buffer)
    {
        size_t n_written = 0;

        if (this.aggregate_value != "")
        {
            var aggregate_value_length = buffer.encode_string (this.aggregate_value);
            n_written += aggregate_value_length;
            n_written += buffer.encode_varint (aggregate_value_length);
            n_written += buffer.encode_varint (66);
        }
        if (this.string_value != null)
        {
            var string_value_length = buffer.encode_bytes (this.string_value);
            n_written += string_value_length;
            n_written += buffer.encode_varint (string_value_length);
            n_written += buffer.encode_varint (58);
        }
        if (this.double_value != 0d)
        {
            n_written += buffer.encode_double (this.double_value);
            n_written += buffer.encode_varint (49);
        }
        if (this.negative_int_value != 0)
        {
            n_written += buffer.encode_int64 (this.negative_int_value);
            n_written += buffer.encode_varint (40);
        }
        if (this.positive_int_value != 0)
        {
            n_written += buffer.encode_uint64 (this.positive_int_value);
            n_written += buffer.encode_varint (32);
        }
        if (this.identifier_value != "")
        {
            var identifier_value_length = buffer.encode_string (this.identifier_value);
            n_written += identifier_value_length;
            n_written += buffer.encode_varint (identifier_value_length);
            n_written += buffer.encode_varint (26);
        }
        for (unowned List<NamePart> i = this.name.last (); i != null; i = i.prev)
        {
            var name_length = i.data.encode (buffer);
            n_written += name_length;
            n_written += buffer.encode_varint (name_length);
            n_written += buffer.encode_varint (18);
        }

        return n_written;
    }

    public override string to_string (string indent = "")
    {
        var text = "";

        foreach (unowned NamePart v in this.name)
        {
            text += indent + "name {\n";
            text += "%s".printf (v.to_string (indent + "  "));
            text += indent + "}\n";
        }
        text += indent + "identifier_value: %s\n".printf (Protobuf.string_to_string (this.identifier_value));
        text += indent + "positive_int_value: %s\n".printf (this.positive_int_value.to_string ());
        text += indent + "negative_int_value: %s\n".printf (this.negative_int_value.to_string ());
        text += indent + "double_value: %s\n".printf (this.double_value.to_string ());
        text += indent + "string_value: %s\n".printf (Protobuf.bytes_to_string (this.string_value));
        text += indent + "aggregate_value: %s\n".printf (Protobuf.string_to_string (this.aggregate_value));

        return text;
    }
}

public class SourceCodeInfo : Protobuf.Message
{
    public class Location : Protobuf.Message
    {
        public List<int32> path = null;
        public List<int32> span = null;

        public Location.from_data (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
        {
            decode (buffer, data_length);
        }

        public override bool decode (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
        {
            size_t end;
            if (data_length < 0)
                end = buffer.buffer.length;
            else
                end = buffer.read_index + data_length;

            while (buffer.read_index < end)
            {
                var key = buffer.decode_varint ();
                var wire_type = key & 0x7;
                var field_number = key >> 3;

                if (field_number == 1 && wire_type == 2)
                {
                    var path_length = buffer.decode_varint ();
                    var path_end = buffer.read_index + path_length;
                    while (buffer.read_index < path_end)
                        this.path.append (buffer.decode_int32 ());
                    if (buffer.read_index != path_end)
                        buffer.error = true;
                }
                else if (field_number == 2 && wire_type == 2)
                {
                    var span_length = buffer.decode_varint ();
                    var span_end = buffer.read_index + span_length;
                    while (buffer.read_index < span_end)
                        this.span.append (buffer.decode_int32 ());
                    if (buffer.read_index != span_end)
                        buffer.error = true;
                }
                else
                    buffer.decode_unknown (wire_type);
            }

            if (buffer.read_index != end)
                buffer.error = true;

            return !buffer.error;
        }

        public override size_t encode (Protobuf.EncodeBuffer buffer)
        {
            size_t n_written = 0;

            size_t span_length = 0;
            for (unowned List<int32> i = this.span.last (); i != null; i = i.prev)
            {
                span_length += buffer.encode_int32 (i.data);
            }
            if (span_length != 0)
            {
                n_written += span_length;
                n_written += buffer.encode_varint (span_length);
                n_written += buffer.encode_varint (18);
            }
            size_t path_length = 0;
            for (unowned List<int32> i = this.path.last (); i != null; i = i.prev)
            {
                path_length += buffer.encode_int32 (i.data);
            }
            if (path_length != 0)
            {
                n_written += path_length;
                n_written += buffer.encode_varint (path_length);
                n_written += buffer.encode_varint (10);
            }

            return n_written;
        }

        public override string to_string (string indent = "")
        {
            var text = "";

            foreach (unowned int32 v in this.path)
            {
                text += indent + "path: %s\n".printf (v.to_string ());
            }
            foreach (unowned int32 v in this.span)
            {
                text += indent + "span: %s\n".printf (v.to_string ());
            }

            return text;
        }
    }
    public List<Location> location = null;

    public SourceCodeInfo.from_data (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        decode (buffer, data_length);
    }

    public override bool decode (Protobuf.DecodeBuffer buffer, ssize_t data_length = -1)
    {
        size_t end;
        if (data_length < 0)
            end = buffer.buffer.length;
        else
            end = buffer.read_index + data_length;

        while (buffer.read_index < end)
        {
            var key = buffer.decode_varint ();
            var wire_type = key & 0x7;
            var field_number = key >> 3;

            if (field_number == 1 && wire_type == 2)
                this.location.append (new Location.from_data (buffer, (ssize_t) buffer.decode_varint ()));
            else
                buffer.decode_unknown (wire_type);
        }

        if (buffer.read_index != end)
            buffer.error = true;

        return !buffer.error;
    }

    public override size_t encode (Protobuf.EncodeBuffer buffer)
    {
        size_t n_written = 0;

        for (unowned List<Location> i = this.location.last (); i != null; i = i.prev)
        {
            var location_length = i.data.encode (buffer);
            n_written += location_length;
            n_written += buffer.encode_varint (location_length);
            n_written += buffer.encode_varint (10);
        }

        return n_written;
    }

    public override string to_string (string indent = "")
    {
        var text = "";

        foreach (unowned Location v in this.location)
        {
            text += indent + "location {\n";
            text += "%s".printf (v.to_string (indent + "  "));
            text += indent + "}\n";
        }

        return text;
    }
}
